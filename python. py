# api/gerar_agente.py

# Supondo que sua estrutura de agentes esteja em 'python/agentes.py'
from python.agentes import CEONexus, AgenteTarefaEspecifica

# Importe a biblioteca do Google Gemini
from google.generativeai import GenerativeModel
import os
import json

# Configure a API do Gemini com sua chave de API
# A chave deve ser armazenada em uma variável de ambiente na Vercel por segurança
API_KEY = os.environ.get("GEMINI_API_KEY")
model = GenerativeModel("gemini-pro", api_key=API_KEY)

def handler(request):
    """
    Função principal que a Vercel executa.
    Lida com requisições HTTP.
    """
    if request.method == "POST":
        try:
            # Recebe o prompt do front-end
            body = json.loads(request.body)
            prompt = body.get("prompt", "Gere um agente autônomo.")

            # Você pode usar a sua estrutura de agentes aqui para construir o prompt
            # Exemplo: O CEO Nexus decide qual prompt enviar
            ceo_nexus = CEONexus()
            # Este é apenas um exemplo. A lógica real pode ser mais complexa.
            prompt_completo = f"Com base na missão do EcoGuardiões, gere o código Python para um novo agente autônomo com a seguinte tarefa: '{prompt}'."

            # Chama a API do Gemini
            response = model.generate_content(prompt_completo)
            codigo_gerado = response.text

            return {
                "statusCode": 200,
                "body": json.dumps({"codigo_gerado": codigo_gerado}),
                "headers": {"Content-Type": "application/json"}
            }
        except Exception as e:
            return {
                "statusCode": 500,
                "body": json.dumps({"error": str(e)}),
                "headers": {"Content-Type": "application/json"}
            }

    return {
        "statusCode": 405,
        "body": "Método não permitido.",
        "headers": {"Content-Type": "text/plain"}
    }

