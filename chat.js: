// A chave da API do Google Gemini, conforme solicitado na Fase 6
const GEMINI_API_KEY = "AIzaSyCdXfHDTXTbkTnV0FLZKsb5JhNmYFKJX-Y"; 
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=" + GEMINI_API_KEY;

const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');

// Adiciona event listeners para o botão de envio e a tecla Enter
if (sendButton && userInput && chatMessages) { // Garante que os elementos existem
    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            sendMessage();
        }
    });

    // Mensagem de boas-vindas inicial (opcional)
    appendMessage('bot', 'Olá! Sou seu Agente IA. Como posso ajudar hoje?');
} else {
    // Caso os elementos não sejam encontrados, mostra um erro no console
    console.error("Elementos do chat não encontrados. Verifique seu HTML (chat-messages, user-input, send-button).");
}

async function sendMessage() {
    const message = userInput.value.trim();
    if (message === "") return;

    appendMessage('user', message); // Exibe a mensagem do usuário no chat
    userInput.value = ''; // Limpa o campo de entrada

    try {
        const response = await fetch(GEMINI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{ text: message }]
                }]
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Erro da API Gemini:', errorData);
            appendMessage('bot', 'Desculpe, houve um erro ao processar sua solicitação.');
            return;
        }

        const data = await response.json();
        // Verifica se a resposta contém candidatos e conteúdo
        if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0]) {
            const botResponse = data.candidates[0].content.parts[0].text;
            appendMessage('bot', botResponse);
        } else {
            console.warn('Resposta da API Gemini vazia ou mal formatada:', data);
            appendMessage('bot', 'Não recebi uma resposta clara do Agente IA.');
        }

    } catch (error) {
        console.error('Erro ao conectar com a API Gemini:', error);
        appendMessage('bot', 'Não foi possível conectar com o Agente IA. Verifique sua conexão.');
    }
}

function appendMessage(sender, text) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', sender);
    messageElement.textContent = text;
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight; // Rola para o final da conversa
}
