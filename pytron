# api/autoelevacao.py
import google.generativeai as genai
import os
import json
from abc import ABC, abstractmethod

# ====================================================================
# Adaptação das classes para o contexto de uma API
# ====================================================================

# Suas classes de AgenteIA, CEONexus, etc. devem estar aqui ou em 'agentes.py'
# Para este exemplo, vamos importá-las
# from python.agentes import AgenteSemente, AgenteIA
# Se estiverem no mesmo arquivo, você pode usá-las diretamente

# ====================================================================
# Configuração da API para um ambiente de produção
# ====================================================================
try:
    # A chave é lida de uma variável de ambiente, não de input()
    genai.configure(api_key=os.environ.get("GEMINI_API_KEY"))
    model = genai.GenerativeModel('gemini-pro')
except Exception as e:
    # Se a chave não estiver configurada, isso causará um erro 500 no servidor
    model = None
    print(f"Erro ao configurar a API: {e}")

def handler(request):
    """
    Função principal que a Vercel executa para lidar com requisições HTTP.
    """
    if request.method == "POST":
        if not model:
            return {
                "statusCode": 500,
                "body": json.dumps({"error": "API do Gemini não configurada corretamente."}),
                "headers": {"Content-Type": "application/json"}
            }

        try:
            # O front-end envia um JSON com o prompt
            body = json.loads(request.body)
            prompt = body.get("prompt")
            num_ciclos = body.get("ciclos", 1) # Valor padrão de 1

            if not prompt:
                 return {
                    "statusCode": 400,
                    "body": json.dumps({"error": "O prompt é obrigatório."}),
                    "headers": {"Content-Type": "application/json"}
                }
            
            # Use o prompt do usuário para iniciar a auto-evolução
            # A sua lógica de auto-evolução precisa ser adaptada para ser chamada aqui
            # Exemplo:
            # agente_semente = AgenteSemente()
            # resultado = agente_semente.iniciar_ciclo_de_evolucao_api(prompt, ciclos=num_ciclos)

            # Para um exemplo simples, vamos apenas passar o prompt para o Gemini
            response = model.generate_content(prompt)
            codigo_gerado = response.text

            return {
                "statusCode": 200,
                "body": json.dumps({"codigo_gerado": codigo_gerado}),
                "headers": {"Content-Type": "application/json"}
            }
        except Exception as e:
            return {
                "statusCode": 500,
                "body": json.dumps({"error": str(e)}),
                "headers": {"Content-Type": "application/json"}
            }

    return {
        "statusCode": 405,
        "body": "Método não permitido.",
        "headers": {"Content-Type": "text/plain"}
    }
